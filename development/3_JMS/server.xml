<server>
	<featureManager>
		<feature>servlet-3.1</feature>
		<feature>localConnector-1.0</feature>
    	<feature>jms-2.0</feature>
		<feature>wasJmsClient-2.0</feature>
		<feature>wasJmsServer-1.0</feature>
		<feature>ejbLite-3.2</feature>
		<feature>mdb-3.2</feature>
	</featureManager>


	<httpEndpoint host="localhost" httpPort="9124" httpsPort="9125" id="defaultHttpEndpoint">
		 <tcpOptions soReuseAddr="true"/>
	</httpEndpoint>

	<!-- By default messaging engine listens on port 7276 (unsecured) and 7286
		(secured) for incoming data from JMS clients. If you want to bind the messaging
		engine to a different port, you must use the <wasJmsEndpoint> element. -->
	<wasJmsEndpoint wasJmsPort="9126" wasJmsSSLPort="9127"/>

    <!-- A messaging engine is a component, running inside a server, that manages
	messaging resources. Applications are connected to a messaging engine when
	they send and receive messages. When wasJmsServer-1.0 feature is added in
	server.xml by default a messaging engine runtime is initialized which contains
	a default queue(Default.Queue) and a default topic space(Default.Topic.Space).
	If the user wants to create a new queue or topic space then the messagingEngine
	element must be defined in server.xml -->
	<messagingEngine>
		<queue id="QUEUE1"/>

		<queue id="MDBREPLYQ"/>

		<queue id="MDBQ"/>

		<topicSpace id="SPORTS"/>
	</messagingEngine>

	<!-- Liberty profile supports configuring and deploying MDB's for asynchronous
		consumption of messages from Liberty messaging. As per JCA specification,
		MDB's make use of Activation Specifications to interact with Liberty Messaging.
		Defines a JMS activation specification configuration, The ID value must be
		in the format of application name/module name/bean name where Application
		name is the name of the application that is deployed (for example, JMSSample)
		and the application name applies only if the bean is packaged within an EAR
		file . Bean name is the ejb-name of the enterprise bean. Module name is the
		name of the module in which the bean is packaged. Define the destinationRef
		pointing to a valid jmsQueue ID. -->
    <!-- This activation sepc enables the MDB to process messages sent to
         the jmsQueue whose id is jndi/MDBQ -->
	<jmsActivationSpec id="JMSSample/SampleMDB">
		<properties.wasJms destinationRef="jndi/MDBQ"/>
	</jmsActivationSpec>


	<!-- Defines a JMS topic connection factory configuration. JMS applications
		can lookup this topic connection factory to establishing connection to the
		messaging engine running within the same liberty profile as that of the application.
     -->
	<jmsTopicConnectionFactory connectionManagerRef="ConMgr3" jndiName="jmsTCF">
		<properties.wasJms/>
	</jmsTopicConnectionFactory>

	<!-- Each of the connection factory is associated with a connection pool.
		A connection pool holds similar connections created for a specific connection
		factory. connectionManager element enables users to define the pool size for
		each of the associated connection factory. Refer to the connectionManagerRef
		attribute in the connection factory configuration. -->
	<connectionManager id="ConMgr3" maxPoolSize="5"/>


    <!-- Defines the JMS topic configuration. The application looks up the
         topic under JNDI name jmsTopic. The message engine's topic space
         is SPORTS
    -->
	<jmsTopic jndiName="jmsTopic">
        <!-- The topic space in the message engine is SPORTS -->
		<properties.wasJms topicName="SPORTS"/>
	</jmsTopic>

	<!-- Defines a JMS Queue connection factory configuration. JMS applications
		can lookup this Queue connection factory to establishing connection to the
		messaging provider using the factory defined values. Define a queue connection
		factory that the sample application uses to connect to the liberty messaging
		running within the same Liberty profile as that of the application. -->
	<jmsQueueConnectionFactory connectionManagerRef="ConMgr6" jndiName="jndi_JMS_BASE_QCF">
		<properties.wasJms/>
	</jmsQueueConnectionFactory>
	<connectionManager id="ConMgr6" maxPoolSize="5"/>

    <!-- When the application looks up a JMS queue under the JNDI name
         jndi_INPUT_Q, the message engine's QUEUE1 is used
    -->
	<jmsQueue jndiName="jndi_INPUT_Q">
		<properties.wasJms queueName="QUEUE1"/>
	</jmsQueue>

    <!-- When the application looks up a JMS queue under the JNDI name
         jndi/MBBREPLYQ, the message engine's MDBREPLYQ is used
    -->
	<jmsQueue id="jndi/MDBREPLYQ" jndiName="jndi/MDBREPLYQ">
		<properties.wasJms queueName="MDBREPLYQ"/>
	</jmsQueue>

    <!-- When the application looks up a JMS queue under the JNDI name
         jndi/MDBQ, the message engine's MDBQ is used
    -->
	<jmsQueue id="jndi/MDBQ" jndiName="jndi/MDBQ">
        <!-- The queue in the message engine is MDBQ -->
		<properties.wasJms queueName="MDBQ"/>
	</jmsQueue>


    <applicationMonitor updateTrigger="mbean"/>


    <webApplication id="JMSSample" location="JMSSample.war" name="JMSSample"/>
</server>
